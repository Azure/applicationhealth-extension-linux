name: Go (Ext V2)

on:
  workflow_dispatch:
  push:
    branches: 
      - master
      - feature/**
  pull_request:
    branches: 
      - master
      - feature/**

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
    
    runs-on: ${{ matrix.os }}

    env:
      repo_root : ${{ github.workspace }}/go/src/github.com/applicationhealth-extension-linux

    steps:
    - name: Apt-Get Update
      run: sudo apt-get update
      
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.21.7'

    - name: Setup Go Environment 
      run: |
        echo "GOPATH=${{ github.workspace }}/go" >> $GITHUB_ENV
        echo "GO111MODULE=auto" >> $GITHUB_ENV
        echo "${{ github.workspace }}/go/bin" >> $GITHUB_PATH
        go env
  
    - name: Install Go Packages
      run: |
        sudo apt install golint

    - name: Pull Repository
      uses: actions/checkout@v3
      with:
        path: ${{ env.repo_root }}

    - name: Install Bats
      run: |
        sudo apt install npm
        sudo npm install -g bats
        sudo npm install -g https://github.com/bats-core/bats-assert
        sudo npm install -g https://github.com/bats-core/bats-support

    - name: Set Bats Environment Variables
      run: |
        npm root -g
        ls -l $(npm root -g)
        echo "BATS_SUPPORT_PATH=$(npm root -g)/bats-support" >> ~/.bashrc
        echo "BATS_ASSERT_PATH=$(npm root -g)/bats-assert" >> ~/.bashrc

    - name: Install Parallel
      run: |
        sudo apt install parallel

    - name: Install Docker
      run: |
        sudo apt-get install runc
        sudo apt-get install containerd
        sudo apt-get install docker.io

    - name: Formatting 
      continue-on-error: true
      run: test -z "$(gofmt -s -l -w $(find . -type f -name '*.go' -not -path './vendor/*') | tee /dev/stderr)"
      working-directory: ${{ env.repo_root }}

    - name: Lint
      continue-on-error: true
      run: test -z "$(golint . | tee /dev/stderr)"
      working-directory: ${{ env.repo_root }}

    - name: Vet
      continue-on-error: true
      run: test -z "$(go vet -v $(go list ./... | grep -v '/vendor/') | tee /dev/stderr)"
      working-directory: ${{ env.repo_root }}

    - name: Unit Tests
      continue-on-error: true
      run: go list ./... | grep -v '/vendor/' | xargs go test -v -cover
      working-directory: ${{ env.repo_root }}

    - name: Build Binaries
      run: make binary
      working-directory: ${{ env.repo_root }}
    
    - name: Generate Webserver Credentials
      run: |
        openssl rand -out ~/.rnd 2048
        openssl genrsa -out testbin/webserverkey.pem 2048
        openssl req -new -x509 -sha256 -key testbin/webserverkey.pem -out testbin/webservercert.pem -days 3650 -subj '/CN=www.contoso.com/O=Contoso LTD./C=US'
      working-directory: ${{ env.repo_root }}

    - name: Run Sequential Integration Tests
      continue-on-error: true
      run: |
        mkdir -p integration-test/test/sequential/.bats/run-logs/
        sudo bats integration-test/test/sequential -T --trace
      working-directory: ${{ env.repo_root }}

    - name: Retry Failing Sequential Integration Tests
      run: |
        sudo bats integration-test/test/sequential --filter-status failed -T --trace
      working-directory: ${{ env.repo_root }}

    - name: Run Parallel Integration Tests
      continue-on-error: true
      run: |
        mkdir -p integration-test/test/parallel/.bats/run-logs/
        echo $BATS_SUPPORT_PATH && echo $BATS_ASSERT_PATH
        sudo bats integration-test/test/parallel --jobs 10 -T --trace --filter-tags !linuxhostonly
      working-directory: ${{ env.repo_root }}

    - name: Retry Failing Parallel Integration Tests
      run: |
        sudo bats integration-test/test/parallel --filter-status failed -T --trace --filter-tags !linuxhostonly
      working-directory: ${{ env.repo_root }}