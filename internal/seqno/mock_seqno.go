// Code generated by MockGen. DO NOT EDIT.
// Source: internal/seqno/seqno.go
//
// Generated by this command:
//
//	mockgen -source=internal/seqno/seqno.go -destination=internal/seqno/mock_seqno.go -package=seqno
//

// Package seqno is a generated GoMock package.
package seqno

import (
	slog "log/slog"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSequenceNumberManager is a mock of SequenceNumberManager interface.
type MockSequenceNumberManager struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceNumberManagerMockRecorder
}

// MockSequenceNumberManagerMockRecorder is the mock recorder for MockSequenceNumberManager.
type MockSequenceNumberManagerMockRecorder struct {
	mock *MockSequenceNumberManager
}

// NewMockSequenceNumberManager creates a new mock instance.
func NewMockSequenceNumberManager(ctrl *gomock.Controller) *MockSequenceNumberManager {
	mock := &MockSequenceNumberManager{ctrl: ctrl}
	mock.recorder = &MockSequenceNumberManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequenceNumberManager) EXPECT() *MockSequenceNumberManagerMockRecorder {
	return m.recorder
}

// FindSeqNum mocks base method.
func (m *MockSequenceNumberManager) FindSeqNum(configFolder string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSeqNum", configFolder)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSeqNum indicates an expected call of FindSeqNum.
func (mr *MockSequenceNumberManagerMockRecorder) FindSeqNum(configFolder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSeqNum", reflect.TypeOf((*MockSequenceNumberManager)(nil).FindSeqNum), configFolder)
}

// GetCurrentSequenceNumber mocks base method.
func (m *MockSequenceNumberManager) GetCurrentSequenceNumber(el *slog.Logger, name, version string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSequenceNumber", el, name, version)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSequenceNumber indicates an expected call of GetCurrentSequenceNumber.
func (mr *MockSequenceNumberManagerMockRecorder) GetCurrentSequenceNumber(el, name, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSequenceNumber", reflect.TypeOf((*MockSequenceNumberManager)(nil).GetCurrentSequenceNumber), el, name, version)
}

// GetSequenceNumber mocks base method.
func (m *MockSequenceNumberManager) GetSequenceNumber(name, version string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequenceNumber", name, version)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequenceNumber indicates an expected call of GetSequenceNumber.
func (mr *MockSequenceNumberManagerMockRecorder) GetSequenceNumber(name, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequenceNumber", reflect.TypeOf((*MockSequenceNumberManager)(nil).GetSequenceNumber), name, version)
}

// SetSequenceNumber mocks base method.
func (m *MockSequenceNumberManager) SetSequenceNumber(name, version string, seqNo uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSequenceNumber", name, version, seqNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSequenceNumber indicates an expected call of SetSequenceNumber.
func (mr *MockSequenceNumberManagerMockRecorder) SetSequenceNumber(name, version, seqNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSequenceNumber", reflect.TypeOf((*MockSequenceNumberManager)(nil).SetSequenceNumber), name, version, seqNo)
}
